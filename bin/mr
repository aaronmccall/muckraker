#!/usr/bin/env node
'use strict';

const Muckraker = require('../');
const Repl = require('repl');
const Util = require('util');

if (process.argv.length === 2) {
  console.error('Usage: muckraker [database|connection string|json config]');
  process.exit(1);
}

let options = {};
try {
  options = JSON.parse(process.argv[2]);
}
catch (e) {
  options.connection = process.argv[2];
}

const db = new Muckraker(options);

const repl = Repl.start({
  prompt: 'muckraker> ',
  useGlobal: true,
  writer: function (obj) {

    return Util.inspect(obj, false, null, repl.useColors);
  }
});

// keep the db from holding the process open
repl.on('exit', () => {

  process.exit();
});

// hijack the eval method to automatically resolve promises for us
const _eval = repl.eval;
repl.eval = function (cmd, context, filename, callback) {

  // hijack const and let expressions so we can make sure they attach to our context
  cmd = cmd.replace(/^\s*(const|let)\s*/, ' var ');

  // iterate through the context and resolve any promises
  let resolved = Promise.resolve();
  for (const key in context) {
    if (context[key] &&
        typeof context[key].then === 'function') {

      resolved = resolved.then(() => {

        return context[key];
      }).then((val) => {

        context[key] = val;
      });
    }
  }

  resolved.then(() => {

    _eval.call(repl, cmd, context, filename, (err, res) => {

      if (err) {
        return callback(err);
      }

      if (!res ||
          typeof res.then !== 'function') {

        return callback(null, res);
      }

      res.then((val) => {

        callback(null, val);
      }).catch((err) => {

        callback(err);
      });
    });
  });
};

// attach the connected db
repl.context.db = db;
